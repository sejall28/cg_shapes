#include <GL/glut.h>
#include<iostream>


using namespace std;

int ch;                                                    // To track whether we're drawing a line or a circle
int centerX, centerY, radius;                              // For circle center and radius


void displayPoint(int x, int y)
{
   glColor3f(0, 0, 1);
   glPointSize(2);
   glBegin(GL_POINTS);
   glVertex2i(x, y);
   glEnd();
}

void simpleLine(int x1, int y1, int x2, int y2) {
    int dx = abs(x2 - x1);
    int dy = abs(y2 - y1);
    int x, y, p;
    int xIncrement, yIncrement;

    if (x2 > x1)
        xIncrement = 1;
    else
        xIncrement = -1;

    if (y2 > y1)
        yIncrement = 1;
    else
        yIncrement = -1;
  
                                                                                        /*[// for (int i = 0; i <= dx; i++) {
                                                                                                                         if (i % 3 == 0) {
                                                                                                                               displayPoint(x, y);
                                                                                                                                                       }
                                                                                         FOR DOTTED replace this instead of:  while (x != x2) {
                                                                                                                                 glVertex2i(x, y);
                                                                                                                                            ]*/

    if (dx > dy) {
        p = 2 * dy - dx;
        x = x1;
        y = y1;

        glBegin(GL_POINTS);
        while (x != x2) {
            glVertex2i(x, y);
            x += xIncrement;
            if (p >= 0) {
                y += yIncrement;
                p += 2 * (dy - dx);
            } else {
                p += 2 * dy;
            }
        }
        glEnd();
    }
    else {
        p = 2 * dx - dy;
        x = x1;
        y = y1;

        glBegin(GL_POINTS);
        while (y != y2) {
            glVertex2i(x, y);
            y += yIncrement;
            if (p >= 0) {
                x += xIncrement;
                p += 2 * (dx - dy);
            } else {
                p += 2 * dx;
            }
        }
        glEnd();
    }

    glFlush();
}

void drawCircle(int xc, int yc, int r) {
    glColor3f(1, 0, 0);  // Red color for circle
    int x = 0, y = r;
    int d = 3 - (2 * r);
    while (x <= y) {
        glBegin(GL_POINTS);
        glVertex2i(xc + x, yc + y);
        glVertex2i(xc - x, yc + y);
        glVertex2i(xc + x, yc - y);
        glVertex2i(xc - x, yc - y);
        glVertex2i(xc + y, yc + x);
        glVertex2i(xc - y, yc + x);
        glVertex2i(xc + y, yc - x);
        glVertex2i(xc - y, yc - x);
        glEnd();
        x++;
        if (d > 0) {
            y--;
            d = d + 4 * (x - y) + 10;
        } else {
            d = d + 4 * x + 6;
        }
    }
    glFlush();
}

void myMouse(int button, int state, int x, int y)
{
   static int xst, yst, pt = 0;
   if (button == GLUT_LEFT_BUTTON && state == GLUT_DOWN)
   {
      if (pt == 0)
      {
         xst = x;
         yst = y;

         pt = pt + 1;
      }
      else
      {
         if (ch == 1)
         {
            simpleLine(xst, yst, x, y);  // Draw line
         }
         else if (ch == 2)  // Draw circle
         {
            centerX = xst;
            centerY = yst;
           radius = abs(x - xst) + abs(y - yst);  // Manhattan distance

            drawCircle(centerX, centerY, radius);
         }
         pt = 0;
      }
   }
   else if (button == GLUT_RIGHT_BUTTON && state == GLUT_DOWN)
   {
      pt = 0;
   }
   glFlush();
}

void keyboard(unsigned char key, int x, int y)
{
   switch (key)
   {
   case 'l':
      ch = 1;
      glutMouseFunc(myMouse);
      break;
             
   case 'c':
      ch = 2;
      glutMouseFunc(myMouse);
      break;
   }
   glutPostRedisplay();
}

void initialize(void)
{
   glClearColor(1.0, 1.0, 1.0, 1.0);
   glClear(GL_COLOR_BUFFER_BIT);
   gluOrtho2D(0, 600, 600, 0);
}

void primitives(void)
{
   glColor3f(1, 0, 0);
   simpleLine(0, 300, 600, 300);
   simpleLine(300, 0, 300, 600);
   glutKeyboardFunc(keyboard);
}

int main(int argc, char **argv)
{
   glutInit(&argc, argv);
   glutInitDisplayMode(GLUT_SINGLE);
   glutInitWindowPosition(0, 0);
   glutInitWindowSize(600, 600);
   glutCreateWindow("BresenhamLine - SIB62");
   initialize();
   cout << "--------------------";
   cout << "\nPress l. Simple Line";
   cout << "\nPress c. Circle";
   cout << "\n-------------------";
   glutDisplayFunc(primitives);
   glutMainLoop();
   return 0;
}
