#include <GL/glut.h>
#include<iostream>
using namespace std;
 int ch;
void displayPoint(int x, int y)
{
   glColor3f(0, 0, 1);
   glPointSize(2);
   glBegin(GL_POINTS);
   glVertex2i(x, y);
   glEnd();
}


void simpleLine(int x1, int y1, int x2, int y2) {
    int dx = abs(x2 - x1);
    int dy = abs(y2 - y1);
    int x, y, p;
    int xIncrement, yIncrement;


    if (x2 > x1)
        xIncrement = 1;
    else
        xIncrement = -1;


    if (y2 > y1)
        yIncrement = 1;
    else
        yIncrement = -1;

    if (dx > dy) {
        p = 2 * dy - dx;
        x = x1;
        y = y1;

        glBegin(GL_POINTS);
        while (x != x2) {
            glVertex2i(x, y);
            x += xIncrement;
            if (p >= 0) {
                y += yIncrement;
                p += 2 * (dy - dx);
            } else {
                p += 2 * dy;
            }
        }
        glEnd();
    }
    else {
        p = 2 * dx - dy;
        x = x1;
        y = y1;

        glBegin(GL_POINTS);
        while (y != y2) {
            glVertex2i(x, y);
            y += yIncrement;
            if (p >= 0) {
                x += xIncrement;
                p += 2 * (dx - dy);
            } else {
                p += 2 * dx;
            }
        }
        glEnd();
    }

    glFlush();
}

void DottedLine(int x1, int y1, int x2, int y2) {
    int dx = abs(x2 - x1);
    int dy = abs(y2 - y1);
    int x, y, p;
    int xIncrement, yIncrement;


    if (x2 > x1)
        xIncrement = 1;
    else
        xIncrement = -1;


    if (y2 > y1)
        yIncrement = 1;
    else
        yIncrement = -1;

    glBegin(GL_POINTS);

    if (dx > dy) {
        p = 2 * dy - dx;
        x = x1;
        y = y1;

        for (int i = 0; i <= dx; i++) {
            if (i % 3 == 0) {
                displayPoint(x, y);
            }
            x += xIncrement;
            if (p >= 0) {
                y += yIncrement;
                p += 2 * (dy - dx);
            } else {
                p += 2 * dy;
            }
        }
    }
    else {
        p = 2 * dx - dy;
        x = x1;
        y = y1;

        for (int i = 0; i <= dy; i++) {
            if (i % 3 == 0) {
                displayPoint(x, y);
            }
            y += yIncrement;
            if (p >= 0) {
                x += xIncrement;
                p += 2 * (dx - dy);
            } else {
                p += 2 * dx;
            }
        }
    }

    glEnd();
    glFlush();
}

void DashedLine(int x1, int y1, int x2, int y2) {
    int dx = abs(x2 - x1);
    int dy = abs(y2 - y1);
    int x, y, p;
    int xIncrement, yIncrement;
    int count = 1;


    if (x2 > x1)
        xIncrement = 1;
    else
        xIncrement = -1;


    if (y2 > y1)
        yIncrement = 1;
    else
        yIncrement = -1;

    glBegin(GL_POINTS);

    if (dx > dy) {
        p = 2 * dy - dx;
        x = x1;
        y = y1;

        for (int i = 0; i <= dx; i++) {
            if (count <= 10) {
                displayPoint(x, y);
            }

            else if (count > 15) {
                count = 1;
            }

            x += xIncrement;
            if (p >= 0) {
                y += yIncrement;
                p += 2 * (dy - dx);
            } else {
                p += 2 * dy;
            }
            count++;
        }
    }
    else {
        p = 2 * dx - dy;
        x = x1;
        y = y1;

        for (int i = 0; i <= dy; i++) {
            if (count <= 10) {
                displayPoint(x, y);
            }

            else if (count > 15) {
                count = 1;
            }

            y += yIncrement;
            if (p >= 0) {
                x += xIncrement;
                p += 2 * (dx - dy);
            } else {
                p += 2 * dx;
            }
            count++;
        }
    }

    glEnd();
    glFlush();
}
void ThickLine(int x1, int y1, int x2, int y2) {
    int dx = abs(x2 - x1);
    int dy = abs(y2 - y1);
    int x, y, p;
    int xIncrement, yIncrement;

    if (x2 > x1)
        xIncrement = 1;
    else
        xIncrement = -1;

    if (y2 > y1)
        yIncrement = 1;
    else
        yIncrement = -1;

    glColor3f(0, 1, 0);
    glPointSize(20);
    glBegin(GL_POINTS);

    if (dx > dy) {
        p = 2 * dy - dx;
        x = x1;
        y = y1;

        for (int i = 0; i <= dx; i++) {
            glVertex2i(x, y);
            x += xIncrement;
            if (p >= 0) {
                y += yIncrement;
                p += 2 * (dy - dx);
            } else {
                p += 2 * dy;
            }
        }
    } else {
        p = 2 * dx - dy;
        x = x1;
        y = y1;

        for (int i = 0; i <= dy; i++) {
            glVertex2i(x, y);
            y += yIncrement;
            if (p >= 0) {
                x += xIncrement;
                p += 2 * (dx - dy);
            } else {
                p += 2 * dx;
            }
        }
    }

    glEnd();
    glFlush();
}
void myMouse(int button, int state, int x, int y)
{
   static int xst, yst,pt = 0;
   if (button == GLUT_LEFT_BUTTON && state == GLUT_DOWN)
   {
      if (pt == 0)
      {
         xst = x;
         yst = y;

         pt = pt + 1;
      }
      else
      {

         if (ch == 1)
         {
            simpleLine(xst, yst, x, y);
         }
         else if (ch == 2)
         {
            DottedLine(xst, yst, x, y);
         }
         else if (ch == 3)
         {
            DashedLine(xst, yst, x, y);
         }
         else if(ch==4)
         {
                ThickLine(xst,yst,x,y);
         }
         xst = x;
         yst = y;
      }
   }
   else if (button == GLUT_RIGHT_BUTTON && state == GLUT_DOWN)
   {
      pt = 0;
   }
   //Clear Screen
   glFlush();
}
void keyboard(unsigned char key, int x, int y)
{
   switch (key)
   {
   case 's':
      ch = 1;
      glutMouseFunc(myMouse);
      break;
   case 'd':
      ch = 2;
      glutMouseFunc(myMouse);
      break;
   case 'D':
      ch = 3;
      glutMouseFunc(myMouse);
      break;
   case 'T':
        ch=4;
       glutMouseFunc(myMouse);
       break;

   }
   glutPostRedisplay();
}
void initialize(void)
{
   glClearColor(1.0, 1.0, 1.0, 1.0);
   glClear(GL_COLOR_BUFFER_BIT);
   gluOrtho2D(0, 600, 600, 0);
}
void primitives(void)
{
   //glClearColor(1.0, 1.0, 1.0, 1.0);
   //glClear(GL_COLOR_BUFFER_BIT);
   glColor3f(1, 0, 0);
   simpleLine(0, 300, 600, 300);
   simpleLine(300, 0, 300, 600);
   glutKeyboardFunc(keyboard);
}
int main(int argc, char **argv)
{
   glutInit(&argc, argv);
   glutInitDisplayMode(GLUT_SINGLE);
   glutInitWindowPosition(0, 0);
   glutInitWindowSize(600, 600);
   glutCreateWindow("BresenhamLine - SIB62");
   initialize();
   cout<<"--------------------";
   cout<<"\nPres s. Simple Line";
   cout<<"\nPress d. Dotted Line";
   cout<<"\nPress D. Dashed Line";
   cout<<"\nPress T. Thick Line";
   cout<<"\n-------------------";
   glutDisplayFunc(primitives);
   glutMainLoop();
   return 0;
}


